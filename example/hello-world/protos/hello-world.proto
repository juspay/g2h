syntax = "proto3";

package hello_world;

import "validate/validate.proto";

// The greeting service definition
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// Payment connector service for demonstrating enum string serialization and null skipping
service PaymentConnector {
  // Process a payment
  rpc ProcessPayment (PaymentRequest) returns (PaymentResponse) {}
  // Get payment status
  rpc GetPaymentStatus (StatusRequest) returns (PaymentResponse) {}
}

// Test service for enum conflict resolution
service EnumTestService {
  // Test enum serialization conflicts
  rpc TestEnumConflicts (ConflictTestRequest) returns (ConflictTestResponse) {}
}

// Enum for greeting types
enum GreetingType {
  FORMAL = 0;
  CASUAL = 1;
  FRIENDLY = 2;
}

// Payment status enum with real-world error codes
enum PaymentStatus {
  SUCCESS = 0;
  PENDING = 1;
  FAILED = 2;
  CANCELLED = 3;
  
  // Error statuses with actual numeric codes
  BAD_REQUEST_ERROR = 21;
  UNAUTHORIZED_ERROR = 22;
  FORBIDDEN_ERROR = 23;
  NOT_FOUND_ERROR = 24;
  DUPLICATE_ORDER_ERROR = 25;
}

// Authentication status enum - deliberately has same values as PaymentStatus to test conflict resolution
enum AuthenticationStatus {
  option allow_alias = true;    // Allow duplicate values within this enum
  VERIFIED = 0;  // Same as PaymentStatus::SUCCESS
  VERIFYING = 1;  // Same as PaymentStatus::PENDING
  DISCOVER = 1;                 // Same value as VERIFYING - this tests the original issue
  REJECTED = 2;   // Same as PaymentStatus::FAILED
}

// Processing status enum - more conflicts to thoroughly test
enum ProcessingStatus {
  COMPLETED = 0;                // Same as SUCCESS
  PROCESSING = 1;               // Same as PENDING and AUTHENTICATION_PENDING
  ERROR = 2;                    // Same as FAILED
}

// The request message containing the user's name
message HelloRequest {
  string name = 1 [(validate.rules).string.min_len = 3, (validate.rules).string.max_len = 100];
  GreetingType greeting_type = 2;
}

// The response message containing the greeting
message HelloReply {
  string message = 1;
  ResponseStatus status = 2;
  
  // Nested enum within the message
  enum ResponseStatus {
    SUCCESS = 0;
    ERROR = 1;
  }
}

// Payment request
message PaymentRequest {
  string order_id = 1;
  string receipt = 2;
  double amount = 3;
  string currency = 4;
  string customer_id = 5;
  string payment_method = 6;
}

// Status request
message StatusRequest {
  string transaction_id = 1;
  string order_id = 2;
}

// Payment response demonstrating string enum serialization and null skipping
message PaymentResponse {
  string transaction_id = 1;
  PaymentStatus status = 2;  // Will serialize as string like "BAD_REQUEST_ERROR"
  string error_code = 3;     // Will be omitted if empty
  string error_message = 4;  // Will be omitted if empty
  string redirection_data = 5; // Will be omitted if empty
  string network_txn_id = 6;   // Will be omitted if empty
  string response_ref_id = 7;  // Will be omitted if empty
  bool incremental_authorization_allowed = 8;
  string raw_connector_response = 9; // Will be omitted if empty
  
  // Optional error details - will be omitted if null
  ErrorDetail error_detail = 10;
}

// Error detail structure
message ErrorDetail {
  string code = 1;
  string description = 2;
  string step = 3;
  string reason = 4;
  string source = 5;
  map<string, string> metadata = 6;
}

// Test message with conflicting enum values to verify field-specific serialization
message ConflictTestRequest {
  PaymentStatus payment_status = 1;        // Value 1 = PENDING
  AuthenticationStatus auth_status = 2;     // Value 1 = AUTHENTICATION_PENDING or DISCOVER
  ProcessingStatus processing_status = 3;   // Value 1 = PROCESSING
  
  // Optional and repeated fields for comprehensive testing
  optional PaymentStatus optional_payment = 4;
  repeated AuthenticationStatus auth_history = 5;
  repeated ProcessingStatus processing_steps = 6;
}

// Response message for conflict testing
message ConflictTestResponse {
  bool test_passed = 1;
  string serialized_payment = 2;      // Should be "PENDING" 
  string serialized_auth = 3;         // Should be "AUTHENTICATION_PENDING" or "DISCOVER"
  string serialized_processing = 4;   // Should be "PROCESSING"
  repeated string auth_history_strings = 5;
}

// Message with nested enums to test nested enum serialization
message NestedEnumTestMessage {
  // Nested enum that conflicts with top-level enum values
  enum NestedStatus {
    DONE = 0;    // Same value as top-level SUCCESS enums
    WORKING = 1;    // Same value as top-level PENDING enums  
    BROKEN = 2;     // Same value as top-level FAILED enums
  }
  
  // Another nested enum with different naming
  enum InnerState {
    INACTIVE = 0;
    ACTIVE = 1;
    SUSPENDED = 2;
  }
  
  NestedStatus status = 1;
  InnerState state = 2;
  optional NestedStatus optional_status = 3;
  repeated InnerState state_history = 4;
}

// Another message with nested enums for thorough testing
message DeepNestedMessage {
  enum Level1 {
    L1_INIT = 0;
    L1_READY = 1;
  }
  
  message InnerMessage {
    enum Level2 {
      INITIAL = 0;
      ACTIVE = 1;
      FINAL = 2;
    }
    
    Level2 inner_status = 1;
    repeated Level2 process_steps = 2;
  }
  
  Level1 outer_status = 1;
  InnerMessage inner = 2;
}
